name: Invite Users

on:
  issue_comment:
    types: [created]

jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm install
      - name: Add user to organization
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            await octokit.request('PUT /orgs/:org/memberships/:username', {
              org: 'your-organization-name',
              username: 'rizel-test-user',
              role: 'member'
            });
            const comment = await octokit.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id
            });
            const commenter = comment.data.user.login;
            const issue = await octokit.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });
            const file_name = issue.data.title.replace(/ /g, '-').toLowerCase();
            if (comment.data.body.includes('.inviteme')) {
              await octokit.request('PUT /orgs/:org/memberships/:username', {
                org: 'your-organization-name',
                username: commenter,
                role: 'member'
              });
              const file = `workshops/${file_name}.md`;
              const content = `* ${commenter}\n`;
              await octokit.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: file,
                message: `Add ${commenter} to ${file}`,
                content: Buffer.from(content, 'utf8').toString('base64'),
                sha: context.sha
              });
            }
